package com.example.scheduleapplicationimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport androidx.activity.viewModelsimport androidx.lifecycle.Observerimport androidx.recyclerview.widget.DividerItemDecorationimport androidx.recyclerview.widget.LinearLayoutManagerimport kotlinx.android.synthetic.main.activity_main.*import kotlinx.android.synthetic.main.activity_select_schedule_data.*import kotlinx.android.synthetic.main.activity_set_schedule_data.*import java.util.*/*日付選択画面カレンダーか予定一覧を表示する表から、日付を選択する選択された日付は、予定の追加・変更画面（SelectScheduleDataActivity）に渡される*/class MainActivity : AppCompatActivity() {    private val scheduleViewModel: ScheduleViewModel by viewModels()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        // ツールバーのタイトルに「シンプルスケジュール帳」を表示        setSupportActionBar(mainActivityToolbar)        supportActionBar?.setDisplayHomeAsUpEnabled(false)        supportActionBar?.title = ""        mainActivityToolbarText.text = "シンプルスケジュール帳"        // 予定一覧を表示する表（dayRecyclerView）の設定        // 各セルには登録された予定の「日付」・「日付の予定件数」を表示        val adapter = DayScheduleListAdapter(this)        val itemDecoration = DividerItemDecoration(this, DividerItemDecoration.VERTICAL)        dayRecyclerView.adapter = adapter        dayRecyclerView.addItemDecoration(itemDecoration)        dayRecyclerView.layoutManager = LinearLayoutManager(this) // 各セルを縦に並べる        // データベースの「日付」・「日付の予定件数」が変更されたことを検知（CountDateの内容が変更された時の処理）        scheduleViewModel.countDate.observe(this, Observer {            adapter.setSchedule(it) // 表（dayRecyclerView）を再設定        })        // 表（dayRecyclerView）のセルをタップ時、予定の追加・変更画面（SelectScheduleDataActivity）に画面遷移        // タップされたセルの「日付」を渡す        adapter.setOnItemClickListener { countDate ->            val date = countDate.date // タップされたセルの「日付」を取得            val intent = Intent(this@MainActivity, SelectScheduleDataActivity::class.java)            intent.putExtra("SCHEDULE_DATE", date) // 遷移先にタップされた「日付」を渡す            startActivity(intent)        }        // カレンダーをタップした時、予定の追加・変更画面（SelectScheduleDataActivity）に画面遷移        // タップされた「日付」を渡す        calendarView.setOnDateChangeListener{ _, year, month, dayOfMonth ->            val nextMonth = month.toInt() + 1 // １か月進める            val date = "$year/$nextMonth/$dayOfMonth"            val intent = Intent(this@MainActivity, SelectScheduleDataActivity::class.java)            intent.putExtra("SCHEDULE_DATE", date) // 遷移先にタップされた「日付」を渡す            startActivity(intent)        }    }}